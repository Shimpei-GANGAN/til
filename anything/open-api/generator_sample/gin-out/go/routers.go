/*
 * Swagger Petstore - OpenAPI 3.0
 *
 * This is a sample Pet Store Server based on the OpenAPI 3.0 specification.  You can find out more about Swagger at [https://swagger.io](https://swagger.io). In the third iteration of the pet store, we've switched to the design first approach! You can now help us improve the API whether it's by making changes to the definition itself or to the code. That way, with time, we can improve the API in general, and expose some of the new features in OAS3.  _If you're looking for the Swagger 2.0/OAS 2.0 version of Petstore, then click [here](https://editor.swagger.io/?url=https://petstore.swagger.io/v2/swagger.yaml). Alternatively, you can load via the `Edit > Load Petstore OAS 2.0` menu option!_  Some useful links: - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore) - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
 *
 * API version: 1.0.11
 * Contact: apiteam@swagger.io
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// Route is the information for every URI.
type Route struct {
	// Name is the name of this Route.
	Name        string
	// Method is the string for the HTTP method. ex) GET, POST etc..
	Method      string
	// Pattern is the pattern of the URI.
	Pattern     string
	// HandlerFunc is the handler function of this route.
	HandlerFunc gin.HandlerFunc
}

// Routes is the list of the generated Route.
type Routes []Route

// NewRouter returns a new router.
func NewRouter() *gin.Engine {
	router := gin.Default()
	for _, route := range routes {
		switch route.Method {
		case http.MethodGet:
			router.GET(route.Pattern, route.HandlerFunc)
		case http.MethodPost:
			router.POST(route.Pattern, route.HandlerFunc)
		case http.MethodPut:
			router.PUT(route.Pattern, route.HandlerFunc)
		case http.MethodPatch:
			router.PATCH(route.Pattern, route.HandlerFunc)
		case http.MethodDelete:
			router.DELETE(route.Pattern, route.HandlerFunc)
		}
	}

	return router
}

// Index is the index handler.
func Index(c *gin.Context) {
	c.String(http.StatusOK, "Hello World!")
}

var routes = Routes{
	{
		"Index",
		http.MethodGet,
		"/api/v3/",
		Index,
	},

	{
		"AddPet",
		http.MethodPost,
		"/api/v3/pet",
		AddPet,
	},

	{
		"DeletePet",
		http.MethodDelete,
		"/api/v3/pet/:petId",
		DeletePet,
	},

	{
		"FindPetsByStatus",
		http.MethodGet,
		"/api/v3/pet/findByStatus",
		FindPetsByStatus,
	},

	{
		"FindPetsByTags",
		http.MethodGet,
		"/api/v3/pet/findByTags",
		FindPetsByTags,
	},

	{
		"GetPetById",
		http.MethodGet,
		"/api/v3/pet/:petId",
		GetPetById,
	},

	{
		"UpdatePet",
		http.MethodPut,
		"/api/v3/pet",
		UpdatePet,
	},

	{
		"UpdatePetWithForm",
		http.MethodPost,
		"/api/v3/pet/:petId",
		UpdatePetWithForm,
	},

	{
		"UploadFile",
		http.MethodPost,
		"/api/v3/pet/:petId/uploadImage",
		UploadFile,
	},

	{
		"DeleteOrder",
		http.MethodDelete,
		"/api/v3/store/order/:orderId",
		DeleteOrder,
	},

	{
		"GetInventory",
		http.MethodGet,
		"/api/v3/store/inventory",
		GetInventory,
	},

	{
		"GetOrderById",
		http.MethodGet,
		"/api/v3/store/order/:orderId",
		GetOrderById,
	},

	{
		"PlaceOrder",
		http.MethodPost,
		"/api/v3/store/order",
		PlaceOrder,
	},

	{
		"CreateUser",
		http.MethodPost,
		"/api/v3/user",
		CreateUser,
	},

	{
		"CreateUsersWithListInput",
		http.MethodPost,
		"/api/v3/user/createWithList",
		CreateUsersWithListInput,
	},

	{
		"DeleteUser",
		http.MethodDelete,
		"/api/v3/user/:username",
		DeleteUser,
	},

	{
		"GetUserByName",
		http.MethodGet,
		"/api/v3/user/:username",
		GetUserByName,
	},

	{
		"LoginUser",
		http.MethodGet,
		"/api/v3/user/login",
		LoginUser,
	},

	{
		"LogoutUser",
		http.MethodGet,
		"/api/v3/user/logout",
		LogoutUser,
	},

	{
		"UpdateUser",
		http.MethodPut,
		"/api/v3/user/:username",
		UpdateUser,
	},
}
